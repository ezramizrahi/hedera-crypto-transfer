"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constructor = constructor;
exports.fromString = fromString;
exports.fromSolidityAddress = fromSolidityAddress;

var _long = _interopRequireDefault(require("long"));

var hex = _interopRequireWildcard(require("./encoding/hex.cjs"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @typedef {object} IEntityId
 * @property {number | Long} num
 * @property {(number | Long)=} shard
 * @property {(number | Long)=} realm
 */

/**
 * @param {number | Long | IEntityId} props
 * @param {(number | null | Long)=} realm
 * @param {(number | null | Long)=} num
 * @returns {[Long, Long, Long]}
 */
function constructor(props, realm, num) {
  let shard_ = _long.default.ZERO;
  let realm_ = _long.default.ZERO;
  let num_ = _long.default.ZERO;

  if (typeof props === "number" || props instanceof _long.default) {
    if (realm == null) {
      num_ = _long.default.fromValue(props);
    } else {
      shard_ = _long.default.fromValue(props);
      realm_ = _long.default.fromValue(realm);
      num_ = num != null ? _long.default.fromValue(num) : _long.default.ZERO;
    }
  } else {
    shard_ = _long.default.fromValue(props.shard != null ? props.shard : 0);
    realm_ = _long.default.fromValue(props.realm != null ? props.realm : 0);
    num_ = _long.default.fromValue(props.num != null ? props.num : 0);
  }

  if (shard_.isNegative() || realm_.isNegative() || num_.isNegative()) {
    throw new Error("negative numbers are not allowed in IDs");
  }

  return [shard_, realm_, num_];
}
/**
 * @param {string} text
 * @returns {[Long, Long, Long]}
 */


function fromString(text) {
  const strings = text.split(".");

  for (const string of strings) {
    if (string === "") {
      throw new Error("invalid format for entity ID");
    }
  }

  const components = strings.map(Number);

  for (const component of components) {
    if (Number.isNaN(component)) {
      throw new Error("invalid format for entity ID");
    }
  }

  let shard = _long.default.ZERO;
  let realm = _long.default.ZERO;
  let num;

  if (components.length === 1) {
    num = _long.default.fromNumber(components[0]);
  } else if (components.length === 3) {
    shard = _long.default.fromNumber(components[0]);
    realm = _long.default.fromNumber(components[1]);
    num = _long.default.fromNumber(components[2]);
  } else {
    throw new Error("invalid format for entity ID");
  }

  return [shard, realm, num];
}
/**
 * @param {string} address
 * @returns {[Long, Long, Long]}
 */


function fromSolidityAddress(address) {
  const addr = address.startsWith("0x") ? hex.decode(address.slice(2)) : hex.decode(address);

  if (addr.length !== 20) {
    throw new Error(`Invalid hex encoded solidity address length:
                expected length 40, got length ${address.length}`);
  }

  const shard = _long.default.fromBytesBE(Array.from(addr.slice(0, 4)));

  const realm = _long.default.fromBytesBE(Array.from(addr.slice(4, 12)));

  const num = _long.default.fromBytesBE(Array.from(addr.slice(12, 20)));

  return [shard, realm, num];
}